// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as sc from 'aws-cdk-lib/aws-servicecatalog';
import * as constructs from 'constructs';

export interface IEc2ComputeInstance extends cdk.IResource {
  readonly provisionedProductId: string;
  readonly cloudFormationStackArn: string;
  readonly recordId: string;
  readonly iPAddress: string;
  readonly downloadKeyCommand: string;
  readonly sshcommand: string;
}

abstract class Ec2ComputeInstanceBase extends cdk.Resource implements IEc2ComputeInstance {
  public abstract readonly provisionedProductId: string;
  public abstract readonly cloudFormationStackArn: string;
  public abstract readonly recordId: string;
  public abstract readonly iPAddress: string;
  public abstract readonly downloadKeyCommand: string;
  public abstract readonly sshcommand: string;
}

enum ParameterKeys {
  ssmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter = 'SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter',
  instanceType = 'InstanceType',
  numbers = 'Numbers',
}

namespace ParameterKeys {
  const reverseMap = new Map<string, ParameterKeys>();
  Object.keys(ParameterKeys).forEach((s: string) => {
    const e = (<any>ParameterKeys)[s];
    reverseMap.set(s, e);
  });
  export function valueOf(str: string) {
    return reverseMap.get(str);
  }
}
export interface Ec2ComputeInstanceProps {
  /**
   * SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter
   *
   * @default /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
   */
  readonly ssmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter?: string;

  /**
   * InstanceType
   *
   * The instance type of an EC2 instance.
   *
   * Must be t2 micro or small.
   *
   * @default t2.micro
   */
  readonly instanceType?: Ec2ComputeInstance.InstanceType;

  /**
   * Numbers
   *
   * A number to be selected.
   *
   * These are the allowed numbers.
   *
   * @default 5
   */
  readonly numbers?: Ec2ComputeInstance.Numbers;

}
/**
 * Ec2ComputeInstance
 *
 * Compute instance to be used for experiments, does NOT contain DB access
 *
 * Owner: IT
 */
export class Ec2ComputeInstance extends Ec2ComputeInstanceBase {
  public readonly provisionedProductId: string;
  public readonly cloudFormationStackArn: string;
  public readonly recordId: string;
  public readonly iPAddress: string;
  /**
   * The command to download the key
   */
  public readonly downloadKeyCommand: string;
  public readonly sshcommand: string;
  private readonly provisionedProduct: sc.CfnCloudFormationProvisionedProduct;

  /**
   * Create a new Service Catalog \`Ec2ComputeInstance\` product.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: Ec2ComputeInstanceProps) {
    super(scope, id);

    this.provisionedProduct = new sc.CfnCloudFormationProvisionedProduct(this, 'Resource', {
      provisionedProductName: this.node.id,
      provisioningArtifactName: 'EC2LargeInstance',
      productName: 'Ec2ComputeInstance',
      pathName: 'DevTools',
      provisioningParameters:
        Object.entries(props).map(([k, v]) => {
          return {
            key: ParameterKeys.valueOf(k) as string,
            value: v as string,
          };
        }),
    });

    this.provisionedProductId = this.provisionedProduct.ref;
    this.cloudFormationStackArn = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'CloudformationStackArn'));
    this.recordId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'RecordId'));
    this.iPAddress = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.IPAddress'));
    this.downloadKeyCommand = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.DownloadKeyCommand'));
    this.sshcommand = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.sshcommand'));
  }
}

export namespace Ec2ComputeInstance {

  export enum InstanceType {
    /**
     * t2.micro
     */
    T2_MICRO = 't2.micro',

    /**
     * t2.small
     */
    T2_SMALL = 't2.small',

  }


  export enum Numbers {
    /**
     * 1
     */
    VALUE_1 = '1',

    /**
     * 2
     */
    VALUE_2 = '2',

    /**
     * 3
     */
    VALUE_3 = '3',

    /**
     * 4
     */
    VALUE_4 = '4',

    /**
     * 5
     */
    VALUE_5 = '5',

  }

}